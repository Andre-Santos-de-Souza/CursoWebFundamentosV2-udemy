:root{
    --primary-color:#e10f0f;
}

body {
    font-family: sans-serif;
    background-image: linear-gradient(to top right,rgb(0, 0, 255, .9) 50%, red), url(imagens/tile.png);
    background-attachment: fixed, scroll;

    /*O background-blend-mode define como as camadas de fundo (background) devem ser misturadas quando há mais de uma. Ele funciona de maneira semelhante aos modos de mesclagem do Photoshop, aplicando efeitos entre imagens e cores de fundo.*/
    background-blend-mode: color;
    /*
    Outros valores de background-blend-mode
    normal (padrão, sem mistura)
    multiply (multiplica as cores, tornando-as mais escuras)
    screen (clareia as cores combinando-as)
    overlay (mistura multiplicação e screen para criar contraste)
    darken (mantém apenas as partes mais escuras)
    lighten (mantém apenas as partes mais claras)
    color-dodge (clareia as cores aumentando o contraste)
    color-burn (escurece as cores aumentando o contraste)
    difference (subtrai as cores da camada inferior)
    exclusion (efeito similar ao difference, mas mais suave)
    */

}
.cores{
    /*O color-mix() é uma função do CSS usada para misturar duas cores em uma determinada proporção. Ele pode ser útil para criar variações de cores de maneira dinâmica, sem precisar definir manualmente tons mais claros ou escuros.*/
    --color:color-mix(in srgb, var(--primary-color) , transparent 40%);
    /*in srgb → Define que a mistura será feita no espaço de cores sRGB.
    var(--primary-color) → Representa a primeira cor, definida em uma variável CSS.
    transparent 40% → A cor transparent representa a ausência de cor e será aplicada com 40% na mistura.
    O restante (60%) será da var(--primary-color), criando uma versão mais transparente dessa cor.*/

    width: 80%;
    border: 8px dashed var(--color);
    margin: 20px auto;
    padding: 26px;
}
.cores p{
    margin: 0;
}
section{
    /*
    counter-reset: contador; – Inicializa (ou reinicia) um contador chamado contador. Ele começa com o valor 0 por padrão.
    */
    counter-reset: contador;/* Inicializa o contador no elemento pai */
}
.cores{
    /*
    counter-increment: contador; – Aumenta o valor do contador contador em 1 cada vez que o elemento com a classe .cores aparece.
    */
    counter-increment: contador; /* Incrementa o contador para cada elemento com a classe .cores */
}

.cores::before{
    /*content: "[ "counter(contador) " ]"; – Insere o valor atual do contador antes do elemento, formatando-o como [ 1 ], [ 2 ], etc.*/
    content: "[ "counter(contador) " ]";/* Exibe o valor do contador antes do conteúdo do elemento */

    display: inline-block;
    margin-bottom: 16px;
    font-weight: bold;
}
.cores:nth-of-type(2){
    background-color: red;
    /*A propriedade background-clip do CSS define até onde o fundo de um elemento (background) pode se estender. Ela controla se o fundo ficará limitado pelo conteúdo, pelo padding ou até mesmo pela borda do element*/
    background-clip: content-box;
    /*Valores de background-clip
    border-box (padrão): O fundo se estende até a borda do elemento, cobrindo a área de borda, padding e conteúdo.
    padding-box: O fundo se estende apenas até a área de padding, sem cobrir a borda.
    content-box: O fundo se limita apenas à área do conteúdo, sem cobrir o padding nem a borda.
    text (para alguns navegadores modernos): O fundo fica visível apenas onde há texto dentro do elemento.*/
}
.cores:nth-of-type(3){
    /*O hsl() é uma função em CSS que define cores usando três componentes:
    H (Hue - Matiz): Representa a tonalidade da cor em graus (0 a 360°) no círculo cromático.
    S (Saturation - Saturação): Define a intensidade da cor em porcentagem (0% é cinza, 100% é a cor pura).
    L (Lightness - Luminosidade): Indica o quão clara ou escura a cor é (0% é preto, 100% é branco).*/
    background-color: hsl(100deg, 100%, 80%, .5);
    box-shadow: 10px 10px 7px hsl(100deg, 100%, 50%) inset;
}
.cores:nth-of-type(3):hover{
    background-color: hsl(100deg, 100%, 40%);
}
.cores:nth-of-type(4){
    background-image: linear-gradient(70deg, blue, transparent),
                    linear-gradient(to top, red, transparent);
    background-clip: content-box, padding-box;
}
.cores:nth-of-type(5){
    background-image:  radial-gradient(ellipse,blue, color-mix(in srgb, red, transparent), green 50%, yellow);
}
.cores:nth-of-type(6){
    background-image:  radial-gradient(circle,blue, #f008, green 50%, yellow);
}
.cores:nth-of-type(7){
    background-image:  radial-gradient(circle,blue, #f008, green, yellow);
}
.cores:nth-of-type(8){
    /* background-image:  radial-gradient(circle at top left,blue, #f008 20%); */
    /* background-image:  radial-gradient(circle at 0% 90%,blue, #f008 20%); */
    background-image:  radial-gradient(circle at 50px 20px,blue, #f008 20%);
}
.cores:nth-of-type(9){
    background-image:  radial-gradient(ellipse at 50px 20px,blue, #f008 20%);
}
.cores:nth-of-type(10){
    background-image:  radial-gradient(closest-corner at 50px 20px,blue, #f008);
}
.cores:nth-of-type(11){
    background-image:  radial-gradient(farthest-corner at 50px 20px,blue, #f008);
}
.cores:nth-of-type(12){
    background-image:  radial-gradient(closest-side at 50px 20px,blue, #f008);
}
.cores:nth-of-type(13){
    background-image:  radial-gradient(farthest-side at 50px 20px,blue, #f008);
}
.cores:nth-of-type(14){
    background-image:  radial-gradient(circle farthest-side at 50px 20px,blue, #f008);
}
.cores:nth-of-type(15){
    background-image:  radial-gradient(circle farthest-side at 50px 20px,#00F8, #f008), radial-gradient(circle farthest-corner at top right, yellow, transparent);
}
.cores:nth-of-type(16){
    background-image:  radial-gradient(at top,#00F8, #f008), radial-gradient(at bottom, yellow, transparent);
}
.cores:nth-of-type(17){
    background-image: conic-gradient(from 45deg,red 50%,blue, green);
}
.cores:nth-of-type(18){
    background-image: conic-gradient(#f00,#ff0, #0f0, #0ff, #00f, #f0f, #f00);
    transition:  filter 5s linear;
    aspect-ratio: 1;
}
.cores:nth-of-type(18):hover{
    filter: hue-rotate(10turn);
}
.cores:nth-of-type(19){
    background-image: repeating-linear-gradient(to top right, white 0px,white 5px, black 5px, black 10px);
}
.cores:nth-of-type(20){
    background-image: repeating-radial-gradient(white 0px,white 10px, black 10px, black 20px);
}
.cores:nth-of-type(21){
    background-image: repeating-conic-gradient(white 0deg,white 10deg, black 10deg, black 20deg);
}
.cores:nth-of-type(22){
    background-image: repeating-conic-gradient(transparent 0deg,transparent 10deg, black 10deg, black 20deg),
    repeating-radial-gradient(red 0%, transparent, blue 20%);
    background-attachment: fixed, scroll;
}
.cores:nth-of-type(23){
    background-image: repeating-radial-gradient(red 0%, transparent, blue 20%),repeating-linear-gradient(red, blue);
    background-attachment: scroll, fixed;
}
.cores:nth-of-type(24){
    box-shadow: 10px 10px 6px rgba(0,0,0,.8);
}
.cores:nth-of-type(25){
    filter: drop-shadow(3px 3px 2px rgba(0,0,0,.8));
}
.cores:nth-of-type(26){
    background-image: linear-gradient(to top right, transparent 50%, red 50%);
    box-shadow: 10px 10px 6px rgba(0,0,0,.8);
}
.cores:nth-of-type(27){
    background-image: linear-gradient(to top right, transparent 50%, red 50%);
    filter: drop-shadow(3px 3px 2px rgba(0,0,0,.8));
}